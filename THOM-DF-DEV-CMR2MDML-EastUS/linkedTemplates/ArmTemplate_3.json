{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "THOM-DF-DEV-CMR2MDML-EastUS"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/THOM_DataFlow_DEV_ECCI2MDML_EastUS_aitsContactEmailInfo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ecci_unzip_source",
								"type": "DatasetReference"
							},
							"name": "ECCI"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "aitsContactEmailInfo",
								"type": "DatasetReference"
							},
							"name": "aitsContactEmailInfo"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumns"
						},
						{
							"name": "Upsert"
						}
					],
					"scriptLines": [
						"parameters{",
						"     parameter1 as string ('AzurePipeline')",
						"}",
						"source(output(",
						"          PersonId as string,",
						"          ContainerId as string,",
						"          Address_Apt_Unit as string,",
						"          Address_City as string,",
						"          Address_State as string,",
						"          Address_Street as string,",
						"          Address_Zip as string,",
						"          Advanced_Course_Name as string,",
						"          Advanced_Course_Type as string,",
						"          Advanced_Courses_Taken as string,",
						"          Awards_Selector as string,",
						"          College as string,",
						"          Date_Attended as string,",
						"          Date_of_Birth_Month as string,",
						"          Date_of_Birth_Year as string,",
						"          Disciplinary_Issues as string,",
						"          Do_Not_Contact as string,",
						"          Email as string,",
						"          Email_list_opt_out as string,",
						"          Ethnicity as string,",
						"          Event_Attendance as string,",
						"          Event_Attendance_Describe as string,",
						"          Event_City as string,",
						"          Event_State as string,",
						"          Extracurricular_Activities as string,",
						"          Extracurricular_Activities_Years as string,",
						"          Extracurricular_Selector as string,",
						"          First_Name as string,",
						"          Gender as string,",
						"          GPA_Scale as string,",
						"          Grade_Level_Junior as string,",
						"          Grade_Level_Junior_or_Sophomore as string,",
						"          Graduation_Year as string,",
						"          Homeschooled as string,",
						"          Hometown_City as string,",
						"          Hometown_State as string,",
						"          Honors_Awards as string,",
						"          Influencer_Opt_In as string,",
						"          Interests as string,",
						"          JROTC_Branch as string,",
						"          JROTC_Selector as string,",
						"          Last_Name as string,",
						"          Leadership_Selector as string,",
						"          Leadership_Years as string,",
						"          Legal_Infraction as string,",
						"          Legal_Resident as string,",
						"          Letter_of_Recommendation_1 as string,",
						"          Marines_Opt_In as string,",
						"          Nominee as string,",
						"          Nominee_Relationship as string,",
						"          Occupation as string,",
						"          Other_Courses as string,",
						"          Other_Interests as string,",
						"          Other_Marines_Relationship_Type as string,",
						"          Other_Nominee_Relationship as string,",
						"          Other_Occuptation as string,",
						"          Other_Sports as string,",
						"          Phone_Number as string,",
						"          Poolee_Academy_NROTC as string,",
						"          Poolee_Academy_NROTC_Delayed_Entry_Program as string,",
						"          Referral as string,",
						"          Referral_Other as string,",
						"          Relationship_to_Marines as string,",
						"          School_Name as string,",
						"          School_Community_Leadership as string,",
						"          SIPRM_Username as string,",
						"          SLCDA_Referral as string,",
						"          Source as string,",
						"          Sports_JV_Varsity as string,",
						"          Sports_Played as string,",
						"          Sports_Selector as string,",
						"          Sports_Years_Played as string,",
						"          Team_Captain as string,",
						"          Team_Captain_Describe as string,",
						"          Visible_Tattoos as string,",
						"          Volunteer_Hours_Week as string,",
						"          Volunteer_Selector as string,",
						"          Volunteer_Work as string,",
						"          Work_Experience as string,",
						"          Work_Selector as string,",
						"          Work_Years as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ECCI",
						"ECCI derive(guid = uuid(),",
						"          CreateDate = currentTimestamp(),",
						"          CreatedBy = 'AzurePipeline') ~> DerivedColumns",
						"DerivedColumns alterRow(upsertIf(true())) ~> Upsert",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as string,",
						"          address as string,",
						"          statusLookup as string,",
						"          statusReason as string,",
						"          typeLookup as string,",
						"          validationDate as date,",
						"          optedOutDate as date,",
						"          optedOut as integer,",
						"          isPrimary as integer,",
						"          isArchived as integer,",
						"          distributionCode as string,",
						"          archivedDate as date,",
						"          statusDate as date,",
						"          createdBy as string,",
						"          createdDateGmt as timestamp,",
						"          updatedBy as string,",
						"          updatedDateGmt as timestamp,",
						"          aitsBaselineId as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['aitsBaselineId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          id = guid,",
						"          address = Email,",
						"          optedOut = Email_list_opt_out,",
						"          createdDateGmt = CreateDate,",
						"          createdBy = CreatedBy,",
						"          aitsBaselineId = PersonId",
						"     )) ~> aitsContactEmailInfo"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/THOM_DataFlow_DEV_ECCI2MDML_EastUS_aitsContactPhoneInfo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ecci_unzip_source",
								"type": "DatasetReference"
							},
							"name": "ECCI"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "aitsContactPhoneInfo",
								"type": "DatasetReference"
							},
							"name": "aitsContactPhoneInfo"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumns"
						},
						{
							"name": "Upsert"
						}
					],
					"scriptLines": [
						"parameters{",
						"     parameter1 as string ('AzurePipeline')",
						"}",
						"source(output(",
						"          PersonId as string,",
						"          ContainerId as string,",
						"          Address_Apt_Unit as string,",
						"          Address_City as string,",
						"          Address_State as string,",
						"          Address_Street as string,",
						"          Address_Zip as string,",
						"          Advanced_Course_Name as string,",
						"          Advanced_Course_Type as string,",
						"          Advanced_Courses_Taken as string,",
						"          Awards_Selector as string,",
						"          College as string,",
						"          Date_Attended as string,",
						"          Date_of_Birth_Month as string,",
						"          Date_of_Birth_Year as string,",
						"          Disciplinary_Issues as string,",
						"          Do_Not_Contact as string,",
						"          Email as string,",
						"          Email_list_opt_out as string,",
						"          Ethnicity as string,",
						"          Event_Attendance as string,",
						"          Event_Attendance_Describe as string,",
						"          Event_City as string,",
						"          Event_State as string,",
						"          Extracurricular_Activities as string,",
						"          Extracurricular_Activities_Years as string,",
						"          Extracurricular_Selector as string,",
						"          First_Name as string,",
						"          Gender as string,",
						"          GPA_Scale as string,",
						"          Grade_Level_Junior as string,",
						"          Grade_Level_Junior_or_Sophomore as string,",
						"          Graduation_Year as string,",
						"          Homeschooled as string,",
						"          Hometown_City as string,",
						"          Hometown_State as string,",
						"          Honors_Awards as string,",
						"          Influencer_Opt_In as string,",
						"          Interests as string,",
						"          JROTC_Branch as string,",
						"          JROTC_Selector as string,",
						"          Last_Name as string,",
						"          Leadership_Selector as string,",
						"          Leadership_Years as string,",
						"          Legal_Infraction as string,",
						"          Legal_Resident as string,",
						"          Letter_of_Recommendation_1 as string,",
						"          Marines_Opt_In as string,",
						"          Nominee as string,",
						"          Nominee_Relationship as string,",
						"          Occupation as string,",
						"          Other_Courses as string,",
						"          Other_Interests as string,",
						"          Other_Marines_Relationship_Type as string,",
						"          Other_Nominee_Relationship as string,",
						"          Other_Occuptation as string,",
						"          Other_Sports as string,",
						"          Phone_Number as string,",
						"          Poolee_Academy_NROTC as string,",
						"          Poolee_Academy_NROTC_Delayed_Entry_Program as string,",
						"          Referral as string,",
						"          Referral_Other as string,",
						"          Relationship_to_Marines as string,",
						"          School_Name as string,",
						"          School_Community_Leadership as string,",
						"          SIPRM_Username as string,",
						"          SLCDA_Referral as string,",
						"          Source as string,",
						"          Sports_JV_Varsity as string,",
						"          Sports_Played as string,",
						"          Sports_Selector as string,",
						"          Sports_Years_Played as string,",
						"          Team_Captain as string,",
						"          Team_Captain_Describe as string,",
						"          Visible_Tattoos as string,",
						"          Volunteer_Hours_Week as string,",
						"          Volunteer_Selector as string,",
						"          Volunteer_Work as string,",
						"          Work_Experience as string,",
						"          Work_Selector as string,",
						"          Work_Years as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ECCI",
						"ECCI derive(guid = uuid(),",
						"          CreateDate = currentTimestamp(),",
						"          CreatedBy = 'AzurePipeline') ~> DerivedColumns",
						"DerivedColumns alterRow(upsertIf(true())) ~> Upsert",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as string,",
						"          archivedDate as date,",
						"          countryCode as string,",
						"          extension as string,",
						"          isArchived as integer,",
						"          isPrimary as integer,",
						"          optedOut as integer,",
						"          optedOutDate as date,",
						"          typeLookup as string,",
						"          validationDate as date,",
						"          number as string,",
						"          createdBy as string,",
						"          createdDateGmt as timestamp,",
						"          updatedBy as string,",
						"          updatedDateGmt as timestamp,",
						"          aitsBaselineId as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['aitsBaselineId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          id = guid,",
						"          number = Phone_Number,",
						"          createdDateGmt = CreateDate,",
						"          createdBy = CreatedBy,",
						"          aitsBaselineId = PersonId",
						"     )) ~> aitsContactPhoneInfo"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/THOM_DataFlow_DEV_ECCI2MDML_EastUS_aitsInfluencer')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ecci_unzip_source",
								"type": "DatasetReference"
							},
							"name": "ECCI"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "aits_Influencer",
								"type": "DatasetReference"
							},
							"name": "aitsInfluencer"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumns"
						},
						{
							"name": "Upsert"
						}
					],
					"scriptLines": [
						"parameters{",
						"     parameter1 as string ('AzurePipeline')",
						"}",
						"source(output(",
						"          PersonId as string,",
						"          ContainerId as string,",
						"          Address_Apt_Unit as string,",
						"          Address_City as string,",
						"          Address_State as string,",
						"          Address_Street as string,",
						"          Address_Zip as string,",
						"          Advanced_Course_Name as string,",
						"          Advanced_Course_Type as string,",
						"          Advanced_Courses_Taken as string,",
						"          Awards_Selector as string,",
						"          College as string,",
						"          Date_Attended as string,",
						"          Date_of_Birth_Month as string,",
						"          Date_of_Birth_Year as string,",
						"          Disciplinary_Issues as string,",
						"          Do_Not_Contact as string,",
						"          Email as string,",
						"          Email_list_opt_out as string,",
						"          Ethnicity as string,",
						"          Event_Attendance as string,",
						"          Event_Attendance_Describe as string,",
						"          Event_City as string,",
						"          Event_State as string,",
						"          Extracurricular_Activities as string,",
						"          Extracurricular_Activities_Years as string,",
						"          Extracurricular_Selector as string,",
						"          First_Name as string,",
						"          Gender as string,",
						"          GPA_Scale as string,",
						"          Grade_Level_Junior as string,",
						"          Grade_Level_Junior_or_Sophomore as string,",
						"          Graduation_Year as string,",
						"          Homeschooled as string,",
						"          Hometown_City as string,",
						"          Hometown_State as string,",
						"          Honors_Awards as string,",
						"          Influencer_Opt_In as string,",
						"          Interests as string,",
						"          JROTC_Branch as string,",
						"          JROTC_Selector as string,",
						"          Last_Name as string,",
						"          Leadership_Selector as string,",
						"          Leadership_Years as string,",
						"          Legal_Infraction as string,",
						"          Legal_Resident as string,",
						"          Letter_of_Recommendation_1 as string,",
						"          Marines_Opt_In as string,",
						"          Nominee as string,",
						"          Nominee_Relationship as string,",
						"          Occupation as string,",
						"          Other_Courses as string,",
						"          Other_Interests as string,",
						"          Other_Marines_Relationship_Type as string,",
						"          Other_Nominee_Relationship as string,",
						"          Other_Occuptation as string,",
						"          Other_Sports as string,",
						"          Phone_Number as string,",
						"          Poolee_Academy_NROTC as string,",
						"          Poolee_Academy_NROTC_Delayed_Entry_Program as string,",
						"          Referral as string,",
						"          Referral_Other as string,",
						"          Relationship_to_Marines as string,",
						"          School_Name as string,",
						"          School_Community_Leadership as string,",
						"          SIPRM_Username as string,",
						"          SLCDA_Referral as string,",
						"          Source as string,",
						"          Sports_JV_Varsity as string,",
						"          Sports_Played as string,",
						"          Sports_Selector as string,",
						"          Sports_Years_Played as string,",
						"          Team_Captain as string,",
						"          Team_Captain_Describe as string,",
						"          Visible_Tattoos as string,",
						"          Volunteer_Hours_Week as string,",
						"          Volunteer_Selector as string,",
						"          Volunteer_Work as string,",
						"          Work_Experience as string,",
						"          Work_Selector as string,",
						"          Work_Years as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ECCI",
						"ECCI derive(guid = uuid(),",
						"          CreateDate = currentTimestamp(),",
						"          CreatedBy = 'AzurePipeline') ~> DerivedColumns",
						"DerivedColumns alterRow(upsertIf(true())) ~> Upsert",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as string,",
						"          createdBy as string,",
						"          createdDateGmt as timestamp,",
						"          updatedBy as string,",
						"          updatedDateGmt as timestamp,",
						"          hash as string,",
						"          fk_personId as string,",
						"          occupation as string,",
						"          occupationOther as string,",
						"          type as string,",
						"          interests as string,",
						"          interestsOtherValue as string,",
						"          referallSource as string,",
						"          referallSourceOther as string,",
						"          relationToUsmc as string,",
						"          relationToUsmcOther as string,",
						"          collegeAttended as string,",
						"          organizationAffiliations as string,",
						"          mostRecentAssignedBilletGroup as string,",
						"          mostRecentAssignmentMethod as string,",
						"          mostRecentAssignmentComments as string,",
						"          mostRecentSource as string,",
						"          mostRecentStatus as string,",
						"          mostRecentStatusReason as string,",
						"          mostRecentStatusDateGmt as timestamp,",
						"          profileCompletedDateGmt as timestamp,",
						"          firstEmailDateGmt as timestamp,",
						"          fiveDayEmailDateGmt as timestamp,",
						"          tenDayEmailDateGmt as timestamp,",
						"          reassignmentCount as integer,",
						"          pendingArchiveEmailDateGmt as timestamp,",
						"          fk_educationId as string,",
						"          mostRecentAssignmentDateGmt as timestamp,",
						"          homeTownCity as string,",
						"          homeTownState as string,",
						"          doNotContact as boolean,",
						"          aitsBaselineId as string,",
						"          FK_LOC_UNIT_ID as string,",
						"          RANK as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['aitsBaselineId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          id = ContainerId,",
						"          createdBy = CreatedBy,",
						"          createdDateGmt = CreateDate,",
						"          aitsBaselineId = PersonId,",
						"          occupation = Occupation,",
						"          occupationOther = Other_Occuptation,",
						"          interests = Interests,",
						"          interestsOtherValue = Other_Interests,",
						"          referallSource = Referral,",
						"          referallSourceOther = Referral_Other,",
						"          relationToUsmc = Relationship_to_Marines,",
						"          relationToUsmcOther = Other_Marines_Relationship_Type,",
						"          homeTownState = Hometown_State,",
						"          homeTownCity = Hometown_City,",
						"          doNotContact = Do_Not_Contact,",
						"          collegeAttended = College,",
						"          interestsOtherValue = Sports_Played",
						"     )) ~> aitsInfluencer"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/THOM_DataFlow_DEV_ECCI2MDML_EastUS_aitsInfluencerEventReference')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ecci_unzip_source",
								"type": "DatasetReference"
							},
							"name": "ECCI"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "aitsInfluencerEventReference",
								"type": "DatasetReference"
							},
							"name": "aitsInfluencerEventReference",
							"description": "Export data to aitsInfluencerEventReference"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumns"
						},
						{
							"name": "Upsert"
						}
					],
					"scriptLines": [
						"parameters{",
						"     parameter1 as string ('AzurePipeline')",
						"}",
						"source(output(",
						"          InfluencerEventId as string,",
						"          ApplicationId as string,",
						"          EventId as string,",
						"          IsActive as string,",
						"          CreatedById as string,",
						"          DateCreatedUTC as string,",
						"          DateUpdatedUTC as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ECCI",
						"ECCI derive(guid = uuid(),",
						"          CreateDate = currentTimestamp(),",
						"          CreatedBy = 'AzurePipeline') ~> DerivedColumns",
						"DerivedColumns alterRow(upsertIf(true())) ~> Upsert",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as string,",
						"          fk_influencerId as string,",
						"          fk_eventContract as string,",
						"          createdBy as string,",
						"          createdDateGmt as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['fk_influencerId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          id = guid,",
						"          fk_influencerId = ApplicationId,",
						"          fk_eventContract = InfluencerEventId,",
						"          createdBy = CreatedBy,",
						"          createdDateGmt = CreateDate",
						"     )) ~> aitsInfluencerEventReference"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/THOM_DataFlow_DEV_ECCI2MDML_EastUS_aitsPerson')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ecci_unzip_source",
								"type": "DatasetReference"
							},
							"name": "ECCI"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "aits_Person",
								"type": "DatasetReference"
							},
							"name": "aitsPerson"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumns"
						},
						{
							"name": "Upsert"
						}
					],
					"scriptLines": [
						"parameters{",
						"     parameter1 as string ('AzurePipeline')",
						"}",
						"source(output(",
						"          PersonId as string,",
						"          ContainerId as string,",
						"          Address_Apt_Unit as string,",
						"          Address_City as string,",
						"          Address_State as string,",
						"          Address_Street as string,",
						"          Address_Zip as string,",
						"          Advanced_Course_Name as string,",
						"          Advanced_Course_Type as string,",
						"          Advanced_Courses_Taken as string,",
						"          Awards_Selector as string,",
						"          College as string,",
						"          Date_Attended as string,",
						"          Date_of_Birth_Month as string,",
						"          Date_of_Birth_Year as string,",
						"          Disciplinary_Issues as string,",
						"          Do_Not_Contact as string,",
						"          Email as string,",
						"          Email_list_opt_out as string,",
						"          Ethnicity as string,",
						"          Event_Attendance as string,",
						"          Event_Attendance_Describe as string,",
						"          Event_City as string,",
						"          Event_State as string,",
						"          Extracurricular_Activities as string,",
						"          Extracurricular_Activities_Years as string,",
						"          Extracurricular_Selector as string,",
						"          First_Name as string,",
						"          Gender as string,",
						"          GPA_Scale as string,",
						"          Grade_Level_Junior as string,",
						"          Grade_Level_Junior_or_Sophomore as string,",
						"          Graduation_Year as string,",
						"          Homeschooled as string,",
						"          Hometown_City as string,",
						"          Hometown_State as string,",
						"          Honors_Awards as string,",
						"          Influencer_Opt_In as string,",
						"          Interests as string,",
						"          JROTC_Branch as string,",
						"          JROTC_Selector as string,",
						"          Last_Name as string,",
						"          Leadership_Selector as string,",
						"          Leadership_Years as string,",
						"          Legal_Infraction as string,",
						"          Legal_Resident as string,",
						"          Letter_of_Recommendation_1 as string,",
						"          Marines_Opt_In as string,",
						"          Nominee as string,",
						"          Nominee_Relationship as string,",
						"          Occupation as string,",
						"          Other_Courses as string,",
						"          Other_Interests as string,",
						"          Other_Marines_Relationship_Type as string,",
						"          Other_Nominee_Relationship as string,",
						"          Other_Occuptation as string,",
						"          Other_Sports as string,",
						"          Phone_Number as string,",
						"          Poolee_Academy_NROTC as string,",
						"          Poolee_Academy_NROTC_Delayed_Entry_Program as string,",
						"          Referral as string,",
						"          Referral_Other as string,",
						"          Relationship_to_Marines as string,",
						"          School_Name as string,",
						"          School_Community_Leadership as string,",
						"          SIPRM_Username as string,",
						"          SLCDA_Referral as string,",
						"          Source as string,",
						"          Sports_JV_Varsity as string,",
						"          Sports_Played as string,",
						"          Sports_Selector as string,",
						"          Sports_Years_Played as string,",
						"          Team_Captain as string,",
						"          Team_Captain_Describe as string,",
						"          Visible_Tattoos as string,",
						"          Volunteer_Hours_Week as string,",
						"          Volunteer_Selector as string,",
						"          Volunteer_Work as string,",
						"          Work_Experience as string,",
						"          Work_Selector as string,",
						"          Work_Years as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ECCI",
						"ECCI derive(guid = uuid(),",
						"          CreateDate = currentTimestamp(),",
						"          CreatedBy = 'AzurePipeline') ~> DerivedColumns",
						"DerivedColumns alterRow(upsertIf(true())) ~> Upsert",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as string,",
						"          mcrissEthnicCategory as string,",
						"          mcrissGender as string,",
						"          genderIsInferred as boolean,",
						"          mcrissRace as string,",
						"          mcrisRaceOtherDetail as string,",
						"          age as integer,",
						"          yearOfBirth as integer,",
						"          monthOfBirth as integer,",
						"          namePrefix as string,",
						"          firstName as string,",
						"          lastName as string,",
						"          middleName as string,",
						"          nameSuffix as string,",
						"          mostRecentFulfillmentItem as string,",
						"          mostRecentAttributedPromotion as string,",
						"          mostRecentAssignment as string,",
						"          mcrissId as string,",
						"          mcrissAcceptance as string,",
						"          environmentOfRecord as string,",
						"          createdBy as string,",
						"          createdDateGmt as timestamp,",
						"          updatedBy as string,",
						"          updatedDateGmt as timestamp,",
						"          fk_locMcrcSchoolId as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          id = PersonId,",
						"          mcrissGender = Gender,",
						"          mcrissEthnicCategory = Ethnicity,",
						"          mcrissRace = Ethnicity,",
						"          firstName = First_Name,",
						"          lastName = Last_Name,",
						"          monthOfBirth = Date_of_Birth_Month,",
						"          yearOfBirth = Date_of_Birth_Year,",
						"          createdBy = CreatedBy,",
						"          createdDateGmt = CreateDate",
						"     )) ~> aitsPerson"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/THOM_DataFlow_DEV_ECCI2MDML_EastUS_aitsPersonContactEmailInfo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ecci_unzip_source",
								"type": "DatasetReference"
							},
							"name": "ECCI"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "aitsPersonContactEmailInfo",
								"type": "DatasetReference"
							},
							"name": "aitsPersonContactEmailInfo"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumns"
						},
						{
							"name": "Upsert"
						}
					],
					"scriptLines": [
						"parameters{",
						"     parameter1 as string ('AzurePipeline')",
						"}",
						"source(output(",
						"          PersonId as string,",
						"          ContainerId as string,",
						"          Address_Apt_Unit as string,",
						"          Address_City as string,",
						"          Address_State as string,",
						"          Address_Street as string,",
						"          Address_Zip as string,",
						"          Advanced_Course_Name as string,",
						"          Advanced_Course_Type as string,",
						"          Advanced_Courses_Taken as string,",
						"          Awards_Selector as string,",
						"          College as string,",
						"          Date_Attended as string,",
						"          Date_of_Birth_Month as string,",
						"          Date_of_Birth_Year as string,",
						"          Disciplinary_Issues as string,",
						"          Do_Not_Contact as string,",
						"          Email as string,",
						"          Email_list_opt_out as string,",
						"          Ethnicity as string,",
						"          Event_Attendance as string,",
						"          Event_Attendance_Describe as string,",
						"          Event_City as string,",
						"          Event_State as string,",
						"          Extracurricular_Activities as string,",
						"          Extracurricular_Activities_Years as string,",
						"          Extracurricular_Selector as string,",
						"          First_Name as string,",
						"          Gender as string,",
						"          GPA_Scale as string,",
						"          Grade_Level_Junior as string,",
						"          Grade_Level_Junior_or_Sophomore as string,",
						"          Graduation_Year as string,",
						"          Homeschooled as string,",
						"          Hometown_City as string,",
						"          Hometown_State as string,",
						"          Honors_Awards as string,",
						"          Influencer_Opt_In as string,",
						"          Interests as string,",
						"          JROTC_Branch as string,",
						"          JROTC_Selector as string,",
						"          Last_Name as string,",
						"          Leadership_Selector as string,",
						"          Leadership_Years as string,",
						"          Legal_Infraction as string,",
						"          Legal_Resident as string,",
						"          Letter_of_Recommendation_1 as string,",
						"          Marines_Opt_In as string,",
						"          Nominee as string,",
						"          Nominee_Relationship as string,",
						"          Occupation as string,",
						"          Other_Courses as string,",
						"          Other_Interests as string,",
						"          Other_Marines_Relationship_Type as string,",
						"          Other_Nominee_Relationship as string,",
						"          Other_Occuptation as string,",
						"          Other_Sports as string,",
						"          Phone_Number as string,",
						"          Poolee_Academy_NROTC as string,",
						"          Poolee_Academy_NROTC_Delayed_Entry_Program as string,",
						"          Referral as string,",
						"          Referral_Other as string,",
						"          Relationship_to_Marines as string,",
						"          School_Name as string,",
						"          School_Community_Leadership as string,",
						"          SIPRM_Username as string,",
						"          SLCDA_Referral as string,",
						"          Source as string,",
						"          Sports_JV_Varsity as string,",
						"          Sports_Played as string,",
						"          Sports_Selector as string,",
						"          Sports_Years_Played as string,",
						"          Team_Captain as string,",
						"          Team_Captain_Describe as string,",
						"          Visible_Tattoos as string,",
						"          Volunteer_Hours_Week as string,",
						"          Volunteer_Selector as string,",
						"          Volunteer_Work as string,",
						"          Work_Experience as string,",
						"          Work_Selector as string,",
						"          Work_Years as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ECCI",
						"ECCI derive(guid = uuid(),",
						"          CreateDate = currentTimestamp(),",
						"          CreatedBy = 'AzurePipeline') ~> DerivedColumns",
						"DerivedColumns alterRow(upsertIf(true())) ~> Upsert",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as string,",
						"          fk_contactEmailInfoId as string,",
						"          fk_personId as string,",
						"          createdDateGmt as timestamp,",
						"          createdBy as string,",
						"          updatedDateGmt as timestamp,",
						"          updatedBy as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['fk_personId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          id = guid,",
						"          fk_personId = PersonId,",
						"          createdDateGmt = CreateDate,",
						"          createdBy = CreatedBy",
						"     )) ~> aitsPersonContactEmailInfo"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/THOM_DataFlow_DEV_ECCI2MDML_EastUS_aitsPersonContactPhoneInfo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ecci_unzip_source",
								"type": "DatasetReference"
							},
							"name": "ECCI"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "aitsPersonContactPhoneInfo",
								"type": "DatasetReference"
							},
							"name": "aitsPersonContactPhoneInfo"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumns"
						},
						{
							"name": "Upsert"
						}
					],
					"scriptLines": [
						"parameters{",
						"     parameter1 as string ('AzurePipeline')",
						"}",
						"source(output(",
						"          PersonId as string,",
						"          ContainerId as string,",
						"          Address_Apt_Unit as string,",
						"          Address_City as string,",
						"          Address_State as string,",
						"          Address_Street as string,",
						"          Address_Zip as string,",
						"          Advanced_Course_Name as string,",
						"          Advanced_Course_Type as string,",
						"          Advanced_Courses_Taken as string,",
						"          Awards_Selector as string,",
						"          College as string,",
						"          Date_Attended as string,",
						"          Date_of_Birth_Month as string,",
						"          Date_of_Birth_Year as string,",
						"          Disciplinary_Issues as string,",
						"          Do_Not_Contact as string,",
						"          Email as string,",
						"          Email_list_opt_out as string,",
						"          Ethnicity as string,",
						"          Event_Attendance as string,",
						"          Event_Attendance_Describe as string,",
						"          Event_City as string,",
						"          Event_State as string,",
						"          Extracurricular_Activities as string,",
						"          Extracurricular_Activities_Years as string,",
						"          Extracurricular_Selector as string,",
						"          First_Name as string,",
						"          Gender as string,",
						"          GPA_Scale as string,",
						"          Grade_Level_Junior as string,",
						"          Grade_Level_Junior_or_Sophomore as string,",
						"          Graduation_Year as string,",
						"          Homeschooled as string,",
						"          Hometown_City as string,",
						"          Hometown_State as string,",
						"          Honors_Awards as string,",
						"          Influencer_Opt_In as string,",
						"          Interests as string,",
						"          JROTC_Branch as string,",
						"          JROTC_Selector as string,",
						"          Last_Name as string,",
						"          Leadership_Selector as string,",
						"          Leadership_Years as string,",
						"          Legal_Infraction as string,",
						"          Legal_Resident as string,",
						"          Letter_of_Recommendation_1 as string,",
						"          Marines_Opt_In as string,",
						"          Nominee as string,",
						"          Nominee_Relationship as string,",
						"          Occupation as string,",
						"          Other_Courses as string,",
						"          Other_Interests as string,",
						"          Other_Marines_Relationship_Type as string,",
						"          Other_Nominee_Relationship as string,",
						"          Other_Occuptation as string,",
						"          Other_Sports as string,",
						"          Phone_Number as string,",
						"          Poolee_Academy_NROTC as string,",
						"          Poolee_Academy_NROTC_Delayed_Entry_Program as string,",
						"          Referral as string,",
						"          Referral_Other as string,",
						"          Relationship_to_Marines as string,",
						"          School_Name as string,",
						"          School_Community_Leadership as string,",
						"          SIPRM_Username as string,",
						"          SLCDA_Referral as string,",
						"          Source as string,",
						"          Sports_JV_Varsity as string,",
						"          Sports_Played as string,",
						"          Sports_Selector as string,",
						"          Sports_Years_Played as string,",
						"          Team_Captain as string,",
						"          Team_Captain_Describe as string,",
						"          Visible_Tattoos as string,",
						"          Volunteer_Hours_Week as string,",
						"          Volunteer_Selector as string,",
						"          Volunteer_Work as string,",
						"          Work_Experience as string,",
						"          Work_Selector as string,",
						"          Work_Years as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ECCI",
						"ECCI derive(guid = uuid(),",
						"          CreateDate = currentTimestamp(),",
						"          CreatedBy = 'AzurePipeline') ~> DerivedColumns",
						"DerivedColumns alterRow(upsertIf(true())) ~> Upsert",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as string,",
						"          fk_personId as string,",
						"          fk_contactPhoneInfoId as string,",
						"          createdBy as string,",
						"          createdDateGmt as timestamp,",
						"          updatedBy as string,",
						"          updatedDateGmt as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['fk_personId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          id = guid,",
						"          fk_personId = PersonId,",
						"          createdBy = CreatedBy,",
						"          createdDateGmt = CreateDate",
						"     )) ~> aitsPersonContactPhoneInfo"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/aitsInfluencerEventReference')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ECCI_DataFlow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_InfluencerEvent",
								"type": "DatasetReference"
							},
							"name": "aitscontactphoneinfo1"
						},
						{
							"dataset": {
								"referenceName": "DS_aitsInfluencerEventReference",
								"type": "DatasetReference"
							},
							"name": "aitsinfluncereventreference"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_aitsInfluencerEventReference",
								"type": "DatasetReference"
							},
							"name": "aitscontactemailinfon"
						}
					],
					"transformations": [
						{
							"name": "GUID"
						},
						{
							"name": "IDLK"
						},
						{
							"name": "DateLK"
						},
						{
							"name": "DrivedDate"
						},
						{
							"name": "Upsert"
						}
					],
					"scriptLines": [
						"source(output(",
						"          InfluencerEventId as string,",
						"          ApplicationId as string,",
						"          EventId as string,",
						"          IsActive as string,",
						"          CreatedById as string,",
						"          DateCreatedUTC as string,",
						"          DateUpdatedUTC as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> aitscontactphoneinfo1",
						"source(output(",
						"          id as string,",
						"          fk_influencerId as string,",
						"          fk_eventContract as string,",
						"          createdBy as string,",
						"          createdDateGmt as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> aitsinfluncereventreference",
						"aitscontactphoneinfo1 derive(GUID = uuid()) ~> GUID",
						"GUID, aitsinfluncereventreference exists(GUID == id,",
						"     negate:true,",
						"     broadcast: 'both')~> IDLK",
						"IDLK, aitsinfluncereventreference lookup(InfluencerEventId == fk_influencerId,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> DateLK",
						"DateLK derive(createdBy = iif(isNull(createdBy),'Thom-Dev',createdBy),",
						"          createdDateGMT = iif(isNull(createdDateGmt),currentTimestamp(),createdDateGmt),",
						"          updatedBy = 'Thom-Dev',",
						"          updatedDateGMT = currentTimestamp()) ~> DrivedDate",
						"DrivedDate alterRow(upsertIf(true())) ~> Upsert",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as string,",
						"          fk_influencerId as string,",
						"          fk_eventContract as string,",
						"          createdBy as string,",
						"          createdDateGmt as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['fk_influencerId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          id = GUID,",
						"          fk_influencerId = EventId,",
						"          fk_eventContract,",
						"          createdBy,",
						"          createdDateGmt = DrivedDate@createdDateGMT",
						"     )) ~> aitscontactemailinfon"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/aitsInfluncer')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ECCI_DataFlow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_wk_ContainerData_Flattened",
								"type": "DatasetReference"
							},
							"name": "aitscontactphoneinfo1"
						},
						{
							"dataset": {
								"referenceName": "DS_aitsinfluencer",
								"type": "DatasetReference"
							},
							"name": "aitscontactphoneinfo"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_aitsinfluencer",
								"type": "DatasetReference"
							},
							"name": "aitscontactemailinfon"
						}
					],
					"transformations": [
						{
							"name": "GUID"
						},
						{
							"name": "IDLK"
						},
						{
							"name": "DateLK"
						},
						{
							"name": "DrivedDate"
						},
						{
							"name": "Upsert"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PersonId as string,",
						"          ContainerId as string,",
						"          Address_Apt_Unit as string,",
						"          Address_City as string,",
						"          Address_State as string,",
						"          Address_Street as string,",
						"          Address_Zip as string,",
						"          Advanced_Course_Name as string,",
						"          Advanced_Course_Type as string,",
						"          Advanced_Courses_Taken as string,",
						"          Awards_Selector as string,",
						"          College as string,",
						"          Date_Attended as string,",
						"          Date_of_Birth_Month as string,",
						"          Date_of_Birth_Year as string,",
						"          Disciplinary_Issues as string,",
						"          Do_Not_Contact as string,",
						"          Email as string,",
						"          Email_list_opt_out as string,",
						"          Ethnicity as string,",
						"          Event_Attendance as string,",
						"          Event_Attendance_Describe as string,",
						"          Event_City as string,",
						"          Event_State as string,",
						"          Extracurricular_Activities as string,",
						"          Extracurricular_Activities_Years as string,",
						"          Extracurricular_Selector as string,",
						"          First_Name as string,",
						"          Gender as string,",
						"          GPA_Scale as string,",
						"          Grade_Level_Junior as string,",
						"          Grade_Level_Junior_or_Sophomore as string,",
						"          Graduation_Year as string,",
						"          Homeschooled as string,",
						"          Hometown_City as string,",
						"          Hometown_State as string,",
						"          Honors_Awards as string,",
						"          Influencer_Opt_In as string,",
						"          Interests as string,",
						"          JROTC_Branch as string,",
						"          JROTC_Selector as string,",
						"          Last_Name as string,",
						"          Leadership_Selector as string,",
						"          Leadership_Years as string,",
						"          Legal_Infraction as string,",
						"          Legal_Resident as string,",
						"          Letter_of_Recommendation_1 as string,",
						"          Marines_Opt_In as string,",
						"          Nominee as string,",
						"          Nominee_Relationship as string,",
						"          Occupation as string,",
						"          Other_Courses as string,",
						"          Other_Interests as string,",
						"          Other_Marines_Relationship_Type as string,",
						"          Other_Nominee_Relationship as string,",
						"          Other_Occuptation as string,",
						"          Other_Sports as string,",
						"          Phone_Number as string,",
						"          Poolee_Academy_NROTC as string,",
						"          Poolee_Academy_NROTC_Delayed_Entry_Program as string,",
						"          Referral as string,",
						"          Referral_Other as string,",
						"          Relationship_to_Marines as string,",
						"          School_Name as string,",
						"          School_Community_Leadership as string,",
						"          SIPRM_Username as string,",
						"          SLCDA_Referral as string,",
						"          Source as string,",
						"          Sports_JV_Varsity as string,",
						"          Sports_Played as string,",
						"          Sports_Selector as string,",
						"          Sports_Years_Played as string,",
						"          Team_Captain as string,",
						"          Team_Captain_Describe as string,",
						"          Visible_Tattoos as string,",
						"          Volunteer_Hours_Week as string,",
						"          Volunteer_Selector as string,",
						"          Volunteer_Work as string,",
						"          Work_Experience as string,",
						"          Work_Selector as string,",
						"          Work_Years as string,",
						"          DateCreatedUTC as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> aitscontactphoneinfo1",
						"source(output(",
						"          id as string,",
						"          createdBy as string,",
						"          createdDateGmt as timestamp,",
						"          updatedBy as string,",
						"          updatedDateGmt as timestamp,",
						"          hash as string,",
						"          fk_personId as string,",
						"          occupation as string,",
						"          occupationOther as string,",
						"          type as string,",
						"          interests as string,",
						"          interestsOtherValue as string,",
						"          referallSource as string,",
						"          referallSourceOther as string,",
						"          relationToUsmc as string,",
						"          relationToUsmcOther as string,",
						"          collegeAttended as string,",
						"          organizationAffiliations as string,",
						"          mostRecentAssignedBilletGroup as string,",
						"          mostRecentAssignmentMethod as string,",
						"          mostRecentAssignmentComments as string,",
						"          mostRecentSource as string,",
						"          mostRecentStatus as string,",
						"          mostRecentStatusReason as string,",
						"          mostRecentStatusDateGmt as timestamp,",
						"          profileCompletedDateGmt as timestamp,",
						"          firstEmailDateGmt as timestamp,",
						"          fiveDayEmailDateGmt as timestamp,",
						"          tenDayEmailDateGmt as timestamp,",
						"          reassignmentCount as integer,",
						"          pendingArchiveEmailDateGmt as timestamp,",
						"          fk_educationId as string,",
						"          mostRecentAssignmentDateGmt as timestamp,",
						"          homeTownCity as string,",
						"          homeTownState as string,",
						"          doNotContact as boolean,",
						"          aitsBaselineId as string,",
						"          FK_LOC_UNIT_ID as string,",
						"          RANK as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> aitscontactphoneinfo",
						"aitscontactphoneinfo1 derive(GUID = uuid()) ~> GUID",
						"GUID, aitscontactphoneinfo exists(GUID == id,",
						"     negate:true,",
						"     broadcast: 'both')~> IDLK",
						"IDLK, aitscontactphoneinfo lookup(PersonId == aitsBaselineId,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> DateLK",
						"DateLK derive(createdBy = iif(isNull(createdBy),'Thom-Dev',createdBy),",
						"          createdDateGMT = iif(isNull(createdDateGmt),currentTimestamp(),createdDateGmt),",
						"          updatedBy = 'Thom-Dev',",
						"          updatedDateGMT = currentTimestamp()) ~> DrivedDate",
						"DrivedDate alterRow(upsertIf(true())) ~> Upsert",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as string,",
						"          createdBy as string,",
						"          createdDateGmt as timestamp,",
						"          updatedBy as string,",
						"          updatedDateGmt as timestamp,",
						"          hash as string,",
						"          fk_personId as string,",
						"          occupation as string,",
						"          occupationOther as string,",
						"          type as string,",
						"          interests as string,",
						"          interestsOtherValue as string,",
						"          referallSource as string,",
						"          referallSourceOther as string,",
						"          relationToUsmc as string,",
						"          relationToUsmcOther as string,",
						"          collegeAttended as string,",
						"          organizationAffiliations as string,",
						"          mostRecentAssignedBilletGroup as string,",
						"          mostRecentAssignmentMethod as string,",
						"          mostRecentAssignmentComments as string,",
						"          mostRecentSource as string,",
						"          mostRecentStatus as string,",
						"          mostRecentStatusReason as string,",
						"          mostRecentStatusDateGmt as timestamp,",
						"          profileCompletedDateGmt as timestamp,",
						"          firstEmailDateGmt as timestamp,",
						"          fiveDayEmailDateGmt as timestamp,",
						"          tenDayEmailDateGmt as timestamp,",
						"          reassignmentCount as integer,",
						"          pendingArchiveEmailDateGmt as timestamp,",
						"          fk_educationId as string,",
						"          mostRecentAssignmentDateGmt as timestamp,",
						"          homeTownCity as string,",
						"          homeTownState as string,",
						"          doNotContact as boolean,",
						"          aitsBaselineId as string,",
						"          FK_LOC_UNIT_ID as string,",
						"          RANK as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['aitsBaselineId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          id = PersonId,",
						"          createdBy = PersonId,",
						"          createdDateGmt = PersonId,",
						"          updatedBy = PersonId,",
						"          hash = PersonId,",
						"          fk_personId = PersonId,",
						"          occupation = PersonId,",
						"          occupationOther = PersonId,",
						"          type = PersonId,",
						"          interests = PersonId,",
						"          interestsOtherValue = PersonId,",
						"          referallSource = PersonId,",
						"          referallSourceOther = PersonId,",
						"          relationToUsmc = PersonId,",
						"          relationToUsmcOther = PersonId,",
						"          collegeAttended = PersonId,",
						"          organizationAffiliations = PersonId,",
						"          mostRecentAssignedBilletGroup = PersonId,",
						"          mostRecentAssignmentMethod = PersonId,",
						"          mostRecentSource = PersonId,",
						"          mostRecentStatus = PersonId,",
						"          mostRecentStatusReason = PersonId,",
						"          mostRecentStatusDateGmt = PersonId,",
						"          profileCompletedDateGmt = PersonId,",
						"          firstEmailDateGmt = PersonId,",
						"          fiveDayEmailDateGmt = PersonId,",
						"          tenDayEmailDateGmt = PersonId,",
						"          reassignmentCount = PersonId,",
						"          pendingArchiveEmailDateGmt = PersonId,",
						"          fk_educationId = PersonId,",
						"          mostRecentAssignmentDateGmt = PersonId,",
						"          homeTownCity = PersonId,",
						"          homeTownState = PersonId,",
						"          doNotContact = PersonId,",
						"          aitsBaselineId = PersonId,",
						"          each(match(/* All input columns */true()),",
						"               /* Input name */$$ = $$)",
						"     )) ~> aitscontactemailinfon"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/aitsPerson')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ECCI_DataFlow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_wk_ContainerData_Flattened",
								"type": "DatasetReference"
							},
							"name": "DSwkContainerData",
							"description": "Import data from DS_wk_C"
						},
						{
							"dataset": {
								"referenceName": "DS_aitsPerson",
								"type": "DatasetReference"
							},
							"name": "aitperson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_aitsPerson",
								"type": "DatasetReference"
							},
							"name": "aitscontactemailinfon"
						}
					],
					"transformations": [
						{
							"name": "DateLK"
						},
						{
							"name": "DrivedDate"
						},
						{
							"name": "Upsert"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PersonId as string,",
						"          ContainerId as string,",
						"          Address_Apt_Unit as string,",
						"          Address_City as string,",
						"          Address_State as string,",
						"          Address_Street as string,",
						"          Address_Zip as string,",
						"          Advanced_Course_Name as string,",
						"          Advanced_Course_Type as string,",
						"          Advanced_Courses_Taken as string,",
						"          Awards_Selector as string,",
						"          College as string,",
						"          Date_Attended as string,",
						"          Date_of_Birth_Month as string,",
						"          Date_of_Birth_Year as string,",
						"          Disciplinary_Issues as string,",
						"          Do_Not_Contact as string,",
						"          Email as string,",
						"          Email_list_opt_out as string,",
						"          Ethnicity as string,",
						"          Event_Attendance as string,",
						"          Event_Attendance_Describe as string,",
						"          Event_City as string,",
						"          Event_State as string,",
						"          Extracurricular_Activities as string,",
						"          Extracurricular_Activities_Years as string,",
						"          Extracurricular_Selector as string,",
						"          First_Name as string,",
						"          Gender as string,",
						"          GPA_Scale as string,",
						"          Grade_Level_Junior as string,",
						"          Grade_Level_Junior_or_Sophomore as string,",
						"          Graduation_Year as string,",
						"          Homeschooled as string,",
						"          Hometown_City as string,",
						"          Hometown_State as string,",
						"          Honors_Awards as string,",
						"          Influencer_Opt_In as string,",
						"          Interests as string,",
						"          JROTC_Branch as string,",
						"          JROTC_Selector as string,",
						"          Last_Name as string,",
						"          Leadership_Selector as string,",
						"          Leadership_Years as string,",
						"          Legal_Infraction as string,",
						"          Legal_Resident as string,",
						"          Letter_of_Recommendation_1 as string,",
						"          Marines_Opt_In as string,",
						"          Nominee as string,",
						"          Nominee_Relationship as string,",
						"          Occupation as string,",
						"          Other_Courses as string,",
						"          Other_Interests as string,",
						"          Other_Marines_Relationship_Type as string,",
						"          Other_Nominee_Relationship as string,",
						"          Other_Occuptation as string,",
						"          Other_Sports as string,",
						"          Phone_Number as string,",
						"          Poolee_Academy_NROTC as string,",
						"          Poolee_Academy_NROTC_Delayed_Entry_Program as string,",
						"          Referral as string,",
						"          Referral_Other as string,",
						"          Relationship_to_Marines as string,",
						"          School_Name as string,",
						"          School_Community_Leadership as string,",
						"          SIPRM_Username as string,",
						"          SLCDA_Referral as string,",
						"          Source as string,",
						"          Sports_JV_Varsity as string,",
						"          Sports_Played as string,",
						"          Sports_Selector as string,",
						"          Sports_Years_Played as string,",
						"          Team_Captain as string,",
						"          Team_Captain_Describe as string,",
						"          Visible_Tattoos as string,",
						"          Volunteer_Hours_Week as string,",
						"          Volunteer_Selector as string,",
						"          Volunteer_Work as string,",
						"          Work_Experience as string,",
						"          Work_Selector as string,",
						"          Work_Years as string,",
						"          DateCreatedUTC as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DSwkContainerData",
						"source(output(",
						"          id as string,",
						"          mcrissEthnicCategory as string,",
						"          mcrissGender as string,",
						"          genderIsInferred as boolean,",
						"          mcrissRace as string,",
						"          mcrisRaceOtherDetail as string,",
						"          age as integer,",
						"          yearOfBirth as integer,",
						"          monthOfBirth as integer,",
						"          namePrefix as string,",
						"          firstName as string,",
						"          lastName as string,",
						"          middleName as string,",
						"          nameSuffix as string,",
						"          mostRecentFulfillmentItem as string,",
						"          mostRecentAttributedPromotion as string,",
						"          mostRecentAssignment as string,",
						"          mcrissId as string,",
						"          mcrissAcceptance as string,",
						"          environmentOfRecord as string,",
						"          createdBy as string,",
						"          createdDateGmt as timestamp,",
						"          updatedBy as string,",
						"          updatedDateGmt as timestamp,",
						"          fk_locMcrcSchoolId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> aitperson",
						"DSwkContainerData, aitperson lookup(PersonId == id,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> DateLK",
						"DateLK derive(createdBy = iif(isNull(createdBy),'Thom-Dev',createdBy),",
						"          createdDateGMT = iif(isNull(createdDateGmt),currentTimestamp(),createdDateGmt),",
						"          updatedBy = 'Thom-Dev',",
						"          updatedDateGMT = currentTimestamp()) ~> DrivedDate",
						"DrivedDate alterRow(upsertIf(true())) ~> Upsert",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as string,",
						"          mcrissEthnicCategory as string,",
						"          mcrissGender as string,",
						"          genderIsInferred as boolean,",
						"          mcrissRace as string,",
						"          mcrisRaceOtherDetail as string,",
						"          age as integer,",
						"          yearOfBirth as integer,",
						"          monthOfBirth as integer,",
						"          namePrefix as string,",
						"          firstName as string,",
						"          lastName as string,",
						"          middleName as string,",
						"          nameSuffix as string,",
						"          mostRecentFulfillmentItem as string,",
						"          mostRecentAttributedPromotion as string,",
						"          mostRecentAssignment as string,",
						"          mcrissId as string,",
						"          mcrissAcceptance as string,",
						"          environmentOfRecord as string,",
						"          createdBy as string,",
						"          createdDateGmt as timestamp,",
						"          updatedBy as string,",
						"          updatedDateGmt as timestamp,",
						"          fk_locMcrcSchoolId as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          id = PersonId,",
						"          mcrissEthnicCategory,",
						"          mcrissGender = Gender,",
						"          mcrissRace = Ethnicity,",
						"          mcrisRaceOtherDetail,",
						"          yearOfBirth,",
						"          monthOfBirth = Date_of_Birth_Month,",
						"          firstName = First_Name,",
						"          lastName = Last_Name,",
						"          createdBy,",
						"          createdDateGmt = aitperson@createdDateGmt,",
						"          updatedBy,",
						"          updatedDateGmt = aitperson@updatedDateGmt,",
						"          each(match(/* All input columns */true()),",
						"               /* Input name */$$ = $$)",
						"     )) ~> aitscontactemailinfon"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/aitsPersonContactEmailInfo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ECCI_DataFlow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_wk_ContainerData_Flattened",
								"type": "DatasetReference"
							},
							"name": "aitsPersonContactEmailInfo"
						},
						{
							"dataset": {
								"referenceName": "DS_aitsPersonContactEmailInfo",
								"type": "DatasetReference"
							},
							"name": "aitscontactphoneinfo"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_aitsPersonContactEmailInfo",
								"type": "DatasetReference"
							},
							"name": "aitscontactemailinfon"
						}
					],
					"transformations": [
						{
							"name": "GUID"
						},
						{
							"name": "IDLK"
						},
						{
							"name": "DateLK"
						},
						{
							"name": "DrivedDate"
						},
						{
							"name": "Upsert"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PersonId as string,",
						"          ContainerId as string,",
						"          Address_Apt_Unit as string,",
						"          Address_City as string,",
						"          Address_State as string,",
						"          Address_Street as string,",
						"          Address_Zip as string,",
						"          Advanced_Course_Name as string,",
						"          Advanced_Course_Type as string,",
						"          Advanced_Courses_Taken as string,",
						"          Awards_Selector as string,",
						"          College as string,",
						"          Date_Attended as string,",
						"          Date_of_Birth_Month as string,",
						"          Date_of_Birth_Year as string,",
						"          Disciplinary_Issues as string,",
						"          Do_Not_Contact as string,",
						"          Email as string,",
						"          Email_list_opt_out as string,",
						"          Ethnicity as string,",
						"          Event_Attendance as string,",
						"          Event_Attendance_Describe as string,",
						"          Event_City as string,",
						"          Event_State as string,",
						"          Extracurricular_Activities as string,",
						"          Extracurricular_Activities_Years as string,",
						"          Extracurricular_Selector as string,",
						"          First_Name as string,",
						"          Gender as string,",
						"          GPA_Scale as string,",
						"          Grade_Level_Junior as string,",
						"          Grade_Level_Junior_or_Sophomore as string,",
						"          Graduation_Year as string,",
						"          Homeschooled as string,",
						"          Hometown_City as string,",
						"          Hometown_State as string,",
						"          Honors_Awards as string,",
						"          Influencer_Opt_In as string,",
						"          Interests as string,",
						"          JROTC_Branch as string,",
						"          JROTC_Selector as string,",
						"          Last_Name as string,",
						"          Leadership_Selector as string,",
						"          Leadership_Years as string,",
						"          Legal_Infraction as string,",
						"          Legal_Resident as string,",
						"          Letter_of_Recommendation_1 as string,",
						"          Marines_Opt_In as string,",
						"          Nominee as string,",
						"          Nominee_Relationship as string,",
						"          Occupation as string,",
						"          Other_Courses as string,",
						"          Other_Interests as string,",
						"          Other_Marines_Relationship_Type as string,",
						"          Other_Nominee_Relationship as string,",
						"          Other_Occuptation as string,",
						"          Other_Sports as string,",
						"          Phone_Number as string,",
						"          Poolee_Academy_NROTC as string,",
						"          Poolee_Academy_NROTC_Delayed_Entry_Program as string,",
						"          Referral as string,",
						"          Referral_Other as string,",
						"          Relationship_to_Marines as string,",
						"          School_Name as string,",
						"          School_Community_Leadership as string,",
						"          SIPRM_Username as string,",
						"          SLCDA_Referral as string,",
						"          Source as string,",
						"          Sports_JV_Varsity as string,",
						"          Sports_Played as string,",
						"          Sports_Selector as string,",
						"          Sports_Years_Played as string,",
						"          Team_Captain as string,",
						"          Team_Captain_Describe as string,",
						"          Visible_Tattoos as string,",
						"          Volunteer_Hours_Week as string,",
						"          Volunteer_Selector as string,",
						"          Volunteer_Work as string,",
						"          Work_Experience as string,",
						"          Work_Selector as string,",
						"          Work_Years as string,",
						"          DateCreatedUTC as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> aitsPersonContactEmailInfo",
						"source(output(",
						"          id as string,",
						"          fk_contactEmailInfoId as string,",
						"          fk_personId as string,",
						"          createdDateGmt as timestamp,",
						"          createdBy as string,",
						"          updatedDateGmt as timestamp,",
						"          updatedBy as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> aitscontactphoneinfo",
						"aitsPersonContactEmailInfo derive(GUID = uuid()) ~> GUID",
						"GUID, aitscontactphoneinfo exists(GUID == id,",
						"     negate:true,",
						"     broadcast: 'both')~> IDLK",
						"IDLK, aitscontactphoneinfo lookup(PersonId == fk_personId,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> DateLK",
						"DateLK derive(createdBy = iif(isNull(createdBy),'Thom-Dev',createdBy),",
						"          createdDateGMT = iif(isNull(createdDateGmt),currentTimestamp(),createdDateGmt),",
						"          updatedBy = 'Thom-Dev',",
						"          updatedDateGMT = currentTimestamp()) ~> DrivedDate",
						"DrivedDate alterRow(upsertIf(true())) ~> Upsert",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as string,",
						"          fk_contactEmailInfoId as string,",
						"          fk_personId as string,",
						"          createdDateGmt as timestamp,",
						"          createdBy as string,",
						"          updatedDateGmt as timestamp,",
						"          updatedBy as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          id = GUID,",
						"          fk_personId = PersonId,",
						"          createdDateGmt = aitscontactphoneinfo@createdDateGmt,",
						"          createdBy,",
						"          updatedDateGmt = aitscontactphoneinfo@updatedDateGmt,",
						"          updatedBy,",
						"          each(match(/* All input columns */true()),",
						"               /* Input name */$$ = $$)",
						"     )) ~> aitscontactemailinfon"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/aitsaddressinfo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ECCI_DataFlow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_wk_ContainerData_Flattened",
								"type": "DatasetReference"
							},
							"name": "addressinfo"
						},
						{
							"dataset": {
								"referenceName": "DS_aitsaddressinfo",
								"type": "DatasetReference"
							},
							"name": "aitsAddressinformation"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_aitsaddressinfo",
								"type": "DatasetReference"
							},
							"name": "aitsaddressinfo"
						}
					],
					"transformations": [
						{
							"name": "GUID"
						},
						{
							"name": "IDLK"
						},
						{
							"name": "DateLK"
						},
						{
							"name": "DrivedDate"
						},
						{
							"name": "Upsert"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PersonId as string,",
						"          ContainerId as string,",
						"          Address_Apt_Unit as string,",
						"          Address_City as string,",
						"          Address_State as string,",
						"          Address_Street as string,",
						"          Address_Zip as string,",
						"          Advanced_Course_Name as string,",
						"          Advanced_Course_Type as string,",
						"          Advanced_Courses_Taken as string,",
						"          Awards_Selector as string,",
						"          College as string,",
						"          Date_Attended as string,",
						"          Date_of_Birth_Month as string,",
						"          Date_of_Birth_Year as string,",
						"          Disciplinary_Issues as string,",
						"          Do_Not_Contact as string,",
						"          Email as string,",
						"          Email_list_opt_out as string,",
						"          Ethnicity as string,",
						"          Event_Attendance as string,",
						"          Event_Attendance_Describe as string,",
						"          Event_City as string,",
						"          Event_State as string,",
						"          Extracurricular_Activities as string,",
						"          Extracurricular_Activities_Years as string,",
						"          Extracurricular_Selector as string,",
						"          First_Name as string,",
						"          Gender as string,",
						"          GPA_Scale as string,",
						"          Grade_Level_Junior as string,",
						"          Grade_Level_Junior_or_Sophomore as string,",
						"          Graduation_Year as string,",
						"          Homeschooled as string,",
						"          Hometown_City as string,",
						"          Hometown_State as string,",
						"          Honors_Awards as string,",
						"          Influencer_Opt_In as string,",
						"          Interests as string,",
						"          JROTC_Branch as string,",
						"          JROTC_Selector as string,",
						"          Last_Name as string,",
						"          Leadership_Selector as string,",
						"          Leadership_Years as string,",
						"          Legal_Infraction as string,",
						"          Legal_Resident as string,",
						"          Letter_of_Recommendation_1 as string,",
						"          Marines_Opt_In as string,",
						"          Nominee as string,",
						"          Nominee_Relationship as string,",
						"          Occupation as string,",
						"          Other_Courses as string,",
						"          Other_Interests as string,",
						"          Other_Marines_Relationship_Type as string,",
						"          Other_Nominee_Relationship as string,",
						"          Other_Occuptation as string,",
						"          Other_Sports as string,",
						"          Phone_Number as string,",
						"          Poolee_Academy_NROTC as string,",
						"          Poolee_Academy_NROTC_Delayed_Entry_Program as string,",
						"          Referral as string,",
						"          Referral_Other as string,",
						"          Relationship_to_Marines as string,",
						"          School_Name as string,",
						"          School_Community_Leadership as string,",
						"          SIPRM_Username as string,",
						"          SLCDA_Referral as string,",
						"          Source as string,",
						"          Sports_JV_Varsity as string,",
						"          Sports_Played as string,",
						"          Sports_Selector as string,",
						"          Sports_Years_Played as string,",
						"          Team_Captain as string,",
						"          Team_Captain_Describe as string,",
						"          Visible_Tattoos as string,",
						"          Volunteer_Hours_Week as string,",
						"          Volunteer_Selector as string,",
						"          Volunteer_Work as string,",
						"          Work_Experience as string,",
						"          Work_Selector as string,",
						"          Work_Years as string,",
						"          DateCreatedUTC as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> addressinfo",
						"source(output(",
						"          id as string,",
						"          addressLine1 as string,",
						"          addressLine2 as string,",
						"          addressLine3 as string,",
						"          archivedDate as date,",
						"          city as string,",
						"          county as string,",
						"          isArchived as integer,",
						"          isPrimary as integer,",
						"          latitude as string,",
						"          longitude as string,",
						"          optedOut as integer,",
						"          optedOutDate as date,",
						"          stateLookup as string,",
						"          statusLookup as string,",
						"          statusDate as date,",
						"          statusReason as string,",
						"          typeLookup as string,",
						"          zipCode as string,",
						"          zipRoute as string,",
						"          createdBy as string,",
						"          createdDateGMT as timestamp,",
						"          updatedBy as string,",
						"          updatedDateGMT as timestamp,",
						"          aitsBaselineId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> aitsAddressinformation",
						"addressinfo derive(GUID = uuid()) ~> GUID",
						"GUID, aitsAddressinformation exists(GUID == id,",
						"     negate:true,",
						"     broadcast: 'both')~> IDLK",
						"IDLK, aitsAddressinformation lookup(PersonId == aitsBaselineId,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> DateLK",
						"DateLK derive(createdBy = iif(isNull(createdBy),'Thom-Dev',createdBy),",
						"          createdDateGMT = iif(isNull(createdDateGMT),currentTimestamp(),createdDateGMT),",
						"          updatedBy = 'Thom-Dev',",
						"          updatedDateGMT = currentTimestamp()) ~> DrivedDate",
						"DrivedDate alterRow(upsertIf(true())) ~> Upsert",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as string,",
						"          addressLine1 as string,",
						"          addressLine2 as string,",
						"          addressLine3 as string,",
						"          archivedDate as date,",
						"          city as string,",
						"          county as string,",
						"          isArchived as integer,",
						"          isPrimary as integer,",
						"          latitude as string,",
						"          longitude as string,",
						"          optedOut as integer,",
						"          optedOutDate as date,",
						"          stateLookup as string,",
						"          statusLookup as string,",
						"          statusDate as date,",
						"          statusReason as string,",
						"          typeLookup as string,",
						"          zipCode as string,",
						"          zipRoute as string,",
						"          createdBy as string,",
						"          createdDateGMT as timestamp,",
						"          updatedBy as string,",
						"          updatedDateGMT as timestamp,",
						"          aitsBaselineId as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['aitsBaselineId'],",
						"     format: 'table',",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          id = GUID,",
						"          addressLine1 = Address_Street,",
						"          addressLine2 = Address_Apt_Unit,",
						"          city = Address_City,",
						"          stateLookup = Address_State,",
						"          zipCode = Address_Zip,",
						"          createdBy,",
						"          createdDateGMT,",
						"          updatedBy,",
						"          updatedDateGMT,",
						"          aitsBaselineId = PersonId",
						"     )) ~> aitsaddressinfo"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/aitscontactemailinfo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ECCI_DataFlow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_wk_ContainerData_Flattened",
								"type": "DatasetReference"
							},
							"name": "aitscontactemailinfo"
						},
						{
							"dataset": {
								"referenceName": "DS_aitscontactemailinfo",
								"type": "DatasetReference"
							},
							"name": "aitscontactemailinfos"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_aitscontactemailinfo",
								"type": "DatasetReference"
							},
							"name": "aitscontactemailinfon"
						}
					],
					"transformations": [
						{
							"name": "GUID"
						},
						{
							"name": "IDLK"
						},
						{
							"name": "DateLK"
						},
						{
							"name": "DrivedDate"
						},
						{
							"name": "Upsert"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PersonId as string,",
						"          ContainerId as string,",
						"          Address_Apt_Unit as string,",
						"          Address_City as string,",
						"          Address_State as string,",
						"          Address_Street as string,",
						"          Address_Zip as string,",
						"          Advanced_Course_Name as string,",
						"          Advanced_Course_Type as string,",
						"          Advanced_Courses_Taken as string,",
						"          Awards_Selector as string,",
						"          College as string,",
						"          Date_Attended as string,",
						"          Date_of_Birth_Month as string,",
						"          Date_of_Birth_Year as string,",
						"          Disciplinary_Issues as string,",
						"          Do_Not_Contact as string,",
						"          Email as string,",
						"          Email_list_opt_out as string,",
						"          Ethnicity as string,",
						"          Event_Attendance as string,",
						"          Event_Attendance_Describe as string,",
						"          Event_City as string,",
						"          Event_State as string,",
						"          Extracurricular_Activities as string,",
						"          Extracurricular_Activities_Years as string,",
						"          Extracurricular_Selector as string,",
						"          First_Name as string,",
						"          Gender as string,",
						"          GPA_Scale as string,",
						"          Grade_Level_Junior as string,",
						"          Grade_Level_Junior_or_Sophomore as string,",
						"          Graduation_Year as string,",
						"          Homeschooled as string,",
						"          Hometown_City as string,",
						"          Hometown_State as string,",
						"          Honors_Awards as string,",
						"          Influencer_Opt_In as string,",
						"          Interests as string,",
						"          JROTC_Branch as string,",
						"          JROTC_Selector as string,",
						"          Last_Name as string,",
						"          Leadership_Selector as string,",
						"          Leadership_Years as string,",
						"          Legal_Infraction as string,",
						"          Legal_Resident as string,",
						"          Letter_of_Recommendation_1 as string,",
						"          Marines_Opt_In as string,",
						"          Nominee as string,",
						"          Nominee_Relationship as string,",
						"          Occupation as string,",
						"          Other_Courses as string,",
						"          Other_Interests as string,",
						"          Other_Marines_Relationship_Type as string,",
						"          Other_Nominee_Relationship as string,",
						"          Other_Occuptation as string,",
						"          Other_Sports as string,",
						"          Phone_Number as string,",
						"          Poolee_Academy_NROTC as string,",
						"          Poolee_Academy_NROTC_Delayed_Entry_Program as string,",
						"          Referral as string,",
						"          Referral_Other as string,",
						"          Relationship_to_Marines as string,",
						"          School_Name as string,",
						"          School_Community_Leadership as string,",
						"          SIPRM_Username as string,",
						"          SLCDA_Referral as string,",
						"          Source as string,",
						"          Sports_JV_Varsity as string,",
						"          Sports_Played as string,",
						"          Sports_Selector as string,",
						"          Sports_Years_Played as string,",
						"          Team_Captain as string,",
						"          Team_Captain_Describe as string,",
						"          Visible_Tattoos as string,",
						"          Volunteer_Hours_Week as string,",
						"          Volunteer_Selector as string,",
						"          Volunteer_Work as string,",
						"          Work_Experience as string,",
						"          Work_Selector as string,",
						"          Work_Years as string,",
						"          DateCreatedUTC as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> aitscontactemailinfo",
						"source(output(",
						"          id as string,",
						"          address as string,",
						"          statusLookup as string,",
						"          statusReason as string,",
						"          typeLookup as string,",
						"          validationDate as date,",
						"          optedOutDate as date,",
						"          optedOut as integer,",
						"          isPrimary as integer,",
						"          isArchived as integer,",
						"          distributionCode as string,",
						"          archivedDate as date,",
						"          statusDate as date,",
						"          createdBy as string,",
						"          createdDateGmt as timestamp,",
						"          updatedBy as string,",
						"          updatedDateGmt as timestamp,",
						"          aitsBaselineId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> aitscontactemailinfos",
						"aitscontactemailinfo derive(GUID = uuid()) ~> GUID",
						"GUID, aitscontactemailinfos exists(GUID == id,",
						"     negate:true,",
						"     broadcast: 'both')~> IDLK",
						"IDLK, aitscontactemailinfos lookup(PersonId == aitsBaselineId,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> DateLK",
						"DateLK derive(createdBy = iif(isNull(createdBy),'Thom-Dev',createdBy),",
						"          createdDateGMT = iif(isNull(createdDateGmt),currentTimestamp(),createdDateGmt),",
						"          updatedBy = 'Thom-Dev',",
						"          updatedDateGMT = currentTimestamp()) ~> DrivedDate",
						"DrivedDate alterRow(upsertIf(true())) ~> Upsert",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as string,",
						"          address as string,",
						"          statusLookup as string,",
						"          statusReason as string,",
						"          typeLookup as string,",
						"          validationDate as date,",
						"          optedOutDate as date,",
						"          optedOut as integer,",
						"          isPrimary as integer,",
						"          isArchived as integer,",
						"          distributionCode as string,",
						"          archivedDate as date,",
						"          statusDate as date,",
						"          createdBy as string,",
						"          createdDateGmt as timestamp,",
						"          updatedBy as string,",
						"          updatedDateGmt as timestamp,",
						"          aitsBaselineId as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['aitsBaselineId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          id = GUID,",
						"          address = Email,",
						"          optedOut = Email_list_opt_out,",
						"          createdBy,",
						"          createdDateGmt = aitscontactemailinfos@createdDateGmt,",
						"          updatedBy,",
						"          updatedDateGmt = aitscontactemailinfos@updatedDateGmt,",
						"          aitsBaselineId = PersonId,",
						"          each(match(/* All input columns */true()),",
						"               /* Input name */$$ = $$)",
						"     )) ~> aitscontactemailinfon"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/aitscontactphoneinfo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ECCI_DataFlow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_wk_ContainerData_Flattened",
								"type": "DatasetReference"
							},
							"name": "aitscontactphoneinfo1"
						},
						{
							"dataset": {
								"referenceName": "DS_aitscontactphoneinfo",
								"type": "DatasetReference"
							},
							"name": "aitscontactphoneinfo"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_aitscontactphoneinfo",
								"type": "DatasetReference"
							},
							"name": "aitscontactemailinfon"
						}
					],
					"transformations": [
						{
							"name": "GUID"
						},
						{
							"name": "IDLK"
						},
						{
							"name": "DateLK"
						},
						{
							"name": "DrivedDate"
						},
						{
							"name": "Upsert"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PersonId as string,",
						"          ContainerId as string,",
						"          Address_Apt_Unit as string,",
						"          Address_City as string,",
						"          Address_State as string,",
						"          Address_Street as string,",
						"          Address_Zip as string,",
						"          Advanced_Course_Name as string,",
						"          Advanced_Course_Type as string,",
						"          Advanced_Courses_Taken as string,",
						"          Awards_Selector as string,",
						"          College as string,",
						"          Date_Attended as string,",
						"          Date_of_Birth_Month as string,",
						"          Date_of_Birth_Year as string,",
						"          Disciplinary_Issues as string,",
						"          Do_Not_Contact as string,",
						"          Email as string,",
						"          Email_list_opt_out as string,",
						"          Ethnicity as string,",
						"          Event_Attendance as string,",
						"          Event_Attendance_Describe as string,",
						"          Event_City as string,",
						"          Event_State as string,",
						"          Extracurricular_Activities as string,",
						"          Extracurricular_Activities_Years as string,",
						"          Extracurricular_Selector as string,",
						"          First_Name as string,",
						"          Gender as string,",
						"          GPA_Scale as string,",
						"          Grade_Level_Junior as string,",
						"          Grade_Level_Junior_or_Sophomore as string,",
						"          Graduation_Year as string,",
						"          Homeschooled as string,",
						"          Hometown_City as string,",
						"          Hometown_State as string,",
						"          Honors_Awards as string,",
						"          Influencer_Opt_In as string,",
						"          Interests as string,",
						"          JROTC_Branch as string,",
						"          JROTC_Selector as string,",
						"          Last_Name as string,",
						"          Leadership_Selector as string,",
						"          Leadership_Years as string,",
						"          Legal_Infraction as string,",
						"          Legal_Resident as string,",
						"          Letter_of_Recommendation_1 as string,",
						"          Marines_Opt_In as string,",
						"          Nominee as string,",
						"          Nominee_Relationship as string,",
						"          Occupation as string,",
						"          Other_Courses as string,",
						"          Other_Interests as string,",
						"          Other_Marines_Relationship_Type as string,",
						"          Other_Nominee_Relationship as string,",
						"          Other_Occuptation as string,",
						"          Other_Sports as string,",
						"          Phone_Number as string,",
						"          Poolee_Academy_NROTC as string,",
						"          Poolee_Academy_NROTC_Delayed_Entry_Program as string,",
						"          Referral as string,",
						"          Referral_Other as string,",
						"          Relationship_to_Marines as string,",
						"          School_Name as string,",
						"          School_Community_Leadership as string,",
						"          SIPRM_Username as string,",
						"          SLCDA_Referral as string,",
						"          Source as string,",
						"          Sports_JV_Varsity as string,",
						"          Sports_Played as string,",
						"          Sports_Selector as string,",
						"          Sports_Years_Played as string,",
						"          Team_Captain as string,",
						"          Team_Captain_Describe as string,",
						"          Visible_Tattoos as string,",
						"          Volunteer_Hours_Week as string,",
						"          Volunteer_Selector as string,",
						"          Volunteer_Work as string,",
						"          Work_Experience as string,",
						"          Work_Selector as string,",
						"          Work_Years as string,",
						"          DateCreatedUTC as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> aitscontactphoneinfo1",
						"source(output(",
						"          id as string,",
						"          archivedDate as date,",
						"          countryCode as string,",
						"          extension as string,",
						"          isArchived as integer,",
						"          isPrimary as integer,",
						"          optedOut as integer,",
						"          optedOutDate as date,",
						"          typeLookup as string,",
						"          validationDate as date,",
						"          number as string,",
						"          createdBy as string,",
						"          createdDateGmt as timestamp,",
						"          updatedBy as string,",
						"          updatedDateGmt as timestamp,",
						"          aitsBaselineId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> aitscontactphoneinfo",
						"aitscontactphoneinfo1 derive(GUID = uuid()) ~> GUID",
						"GUID, aitscontactphoneinfo exists(GUID == id,",
						"     negate:true,",
						"     broadcast: 'both')~> IDLK",
						"IDLK, aitscontactphoneinfo lookup(PersonId == aitsBaselineId,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> DateLK",
						"DateLK derive(createdBy = iif(isNull(createdBy),'Thom-Dev',createdBy),",
						"          createdDateGMT = iif(isNull(createdDateGmt),currentTimestamp(),createdDateGmt),",
						"          updatedBy = 'Thom-Dev',",
						"          updatedDateGMT = currentTimestamp()) ~> DrivedDate",
						"DrivedDate alterRow(upsertIf(true())) ~> Upsert",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as string,",
						"          archivedDate as date,",
						"          countryCode as string,",
						"          extension as string,",
						"          isArchived as integer,",
						"          isPrimary as integer,",
						"          optedOut as integer,",
						"          optedOutDate as date,",
						"          typeLookup as string,",
						"          validationDate as date,",
						"          number as string,",
						"          createdBy as string,",
						"          createdDateGmt as timestamp,",
						"          updatedBy as string,",
						"          updatedDateGmt as timestamp,",
						"          aitsBaselineId as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['aitsBaselineId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          id = GUID,",
						"          number = Phone_Number,",
						"          createdBy,",
						"          createdDateGmt = aitscontactphoneinfo@createdDateGmt,",
						"          updatedBy,",
						"          updatedDateGmt = aitscontactphoneinfo@updatedDateGmt,",
						"          aitsBaselineId = PersonId,",
						"          each(match(/* All input columns */true()),",
						"               /* Input name */$$ = $$)",
						"     )) ~> aitscontactemailinfon"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/aitspersoncontactphoneinfo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ECCI_DataFlow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_wk_ContainerData_Flattened",
								"type": "DatasetReference"
							},
							"name": "aitsPersonContactEmailInfo"
						},
						{
							"dataset": {
								"referenceName": "aitsPersonContactPhoneInfo",
								"type": "DatasetReference"
							},
							"name": "aitscontactphoneinfo"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "aitsPersonContactPhoneInfo",
								"type": "DatasetReference"
							},
							"name": "aitscontactemailinfon"
						}
					],
					"transformations": [
						{
							"name": "GUID"
						},
						{
							"name": "IDLK"
						},
						{
							"name": "DateLK"
						},
						{
							"name": "DrivedDate"
						},
						{
							"name": "Upsert"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PersonId as string,",
						"          ContainerId as string,",
						"          Address_Apt_Unit as string,",
						"          Address_City as string,",
						"          Address_State as string,",
						"          Address_Street as string,",
						"          Address_Zip as string,",
						"          Advanced_Course_Name as string,",
						"          Advanced_Course_Type as string,",
						"          Advanced_Courses_Taken as string,",
						"          Awards_Selector as string,",
						"          College as string,",
						"          Date_Attended as string,",
						"          Date_of_Birth_Month as string,",
						"          Date_of_Birth_Year as string,",
						"          Disciplinary_Issues as string,",
						"          Do_Not_Contact as string,",
						"          Email as string,",
						"          Email_list_opt_out as string,",
						"          Ethnicity as string,",
						"          Event_Attendance as string,",
						"          Event_Attendance_Describe as string,",
						"          Event_City as string,",
						"          Event_State as string,",
						"          Extracurricular_Activities as string,",
						"          Extracurricular_Activities_Years as string,",
						"          Extracurricular_Selector as string,",
						"          First_Name as string,",
						"          Gender as string,",
						"          GPA_Scale as string,",
						"          Grade_Level_Junior as string,",
						"          Grade_Level_Junior_or_Sophomore as string,",
						"          Graduation_Year as string,",
						"          Homeschooled as string,",
						"          Hometown_City as string,",
						"          Hometown_State as string,",
						"          Honors_Awards as string,",
						"          Influencer_Opt_In as string,",
						"          Interests as string,",
						"          JROTC_Branch as string,",
						"          JROTC_Selector as string,",
						"          Last_Name as string,",
						"          Leadership_Selector as string,",
						"          Leadership_Years as string,",
						"          Legal_Infraction as string,",
						"          Legal_Resident as string,",
						"          Letter_of_Recommendation_1 as string,",
						"          Marines_Opt_In as string,",
						"          Nominee as string,",
						"          Nominee_Relationship as string,",
						"          Occupation as string,",
						"          Other_Courses as string,",
						"          Other_Interests as string,",
						"          Other_Marines_Relationship_Type as string,",
						"          Other_Nominee_Relationship as string,",
						"          Other_Occuptation as string,",
						"          Other_Sports as string,",
						"          Phone_Number as string,",
						"          Poolee_Academy_NROTC as string,",
						"          Poolee_Academy_NROTC_Delayed_Entry_Program as string,",
						"          Referral as string,",
						"          Referral_Other as string,",
						"          Relationship_to_Marines as string,",
						"          School_Name as string,",
						"          School_Community_Leadership as string,",
						"          SIPRM_Username as string,",
						"          SLCDA_Referral as string,",
						"          Source as string,",
						"          Sports_JV_Varsity as string,",
						"          Sports_Played as string,",
						"          Sports_Selector as string,",
						"          Sports_Years_Played as string,",
						"          Team_Captain as string,",
						"          Team_Captain_Describe as string,",
						"          Visible_Tattoos as string,",
						"          Volunteer_Hours_Week as string,",
						"          Volunteer_Selector as string,",
						"          Volunteer_Work as string,",
						"          Work_Experience as string,",
						"          Work_Selector as string,",
						"          Work_Years as string,",
						"          DateCreatedUTC as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> aitsPersonContactEmailInfo",
						"source(output(",
						"          id as string,",
						"          fk_personId as string,",
						"          fk_contactPhoneInfoId as string,",
						"          createdBy as string,",
						"          createdDateGmt as timestamp,",
						"          updatedBy as string,",
						"          updatedDateGmt as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> aitscontactphoneinfo",
						"aitsPersonContactEmailInfo derive(GUID = uuid()) ~> GUID",
						"GUID, aitscontactphoneinfo exists(GUID == id,",
						"     negate:true,",
						"     broadcast: 'both')~> IDLK",
						"IDLK, aitscontactphoneinfo lookup(PersonId == fk_personId,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> DateLK",
						"DateLK derive(createdBy = iif(isNull(createdBy),'Thom-Dev',createdBy),",
						"          createdDateGMT = iif(isNull(createdDateGmt),currentTimestamp(),createdDateGmt),",
						"          updatedBy = 'Thom-Dev',",
						"          updatedDateGMT = currentTimestamp()) ~> DrivedDate",
						"DrivedDate alterRow(upsertIf(true())) ~> Upsert",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as string,",
						"          fk_personId as string,",
						"          fk_contactPhoneInfoId as string,",
						"          createdBy as string,",
						"          createdDateGmt as timestamp,",
						"          updatedBy as string,",
						"          updatedDateGmt as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          id = GUID,",
						"          fk_personId = PersonId,",
						"          createdBy,",
						"          createdDateGmt = aitscontactphoneinfo@createdDateGmt,",
						"          updatedBy,",
						"          updatedDateGmt = aitscontactphoneinfo@updatedDateGmt,",
						"          each(match(/* All input columns */true()),",
						"               /* Input name */$$ = $$)",
						"     )) ~> aitscontactemailinfon"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AitsAfterAction')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "AitsAfterAction",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "AitsAfterAction",
								"type": "DataFlowReference",
								"parameters": {
									"parameter1": "'AzurePipeline'"
								},
								"datasetParameters": {
									"CMR": {},
									"aitsAfterAction": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "THOM-Pipe-DF-CMR2MDML-EastUS"
				},
				"annotations": [],
				"lastPublishTime": "2025-04-30T17:10:54Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AitsEventContract')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "aitsEventContract",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "AitsEventContract",
								"type": "DataFlowReference",
								"parameters": {
									"parameter1": "'AzurePipeline'"
								},
								"datasetParameters": {
									"CMR": {},
									"aitsEventContract": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "THOM-Pipe-DF-CMR2MDML-EastUS"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-21T20:01:48Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/THOM-Pipe-DEV-ECCI2MDML-EastUS-EcciInfluencerAssignmentHistory')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "EcciInfluencerAssignmentHistory",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "THOM_DataFlow_DEV_ECCI2MDML_EastUS_EcciInfluencerAssignmentHistory",
								"type": "DataFlowReference",
								"parameters": {
									"parameter1": "'AzurePipeline'"
								},
								"datasetParameters": {
									"ECCI": {},
									"LocMcrcUnit": {},
									"AitsInfluencer": {},
									"EcciInfluencerAssignmentHistory": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-01-28T01:55:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/THOM-Pipe-DEV-ECCI2MDML-EastUS-aitsAddressInfo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "aitsAddressInfo",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "THOM_DataFlow_DEV_ECCI2MDML_EastUS_aitsAddressInfo",
								"type": "DataFlowReference",
								"parameters": {
									"parameter1": "'AzurePipeline'"
								},
								"datasetParameters": {
									"ECCI": {},
									"aitsAddressInfo": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-09-11T20:36:19Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/THOM-Pipe-DEV-ECCI2MDML-EastUS-aitsContactEmailInfo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "aitsContactEmailInfo",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "THOM_DataFlow_DEV_ECCI2MDML_EastUS_aitsContactEmailInfo",
								"type": "DataFlowReference",
								"parameters": {
									"parameter1": "'AzurePipeline'"
								},
								"datasetParameters": {
									"ECCI": {},
									"aitsContactEmailInfo": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-19T22:50:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/THOM_DataFlow_DEV_ECCI2MDML_EastUS_aitsContactEmailInfo')]"
			]
		}
	]
}